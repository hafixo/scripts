#!/usr/bin/env ruby

# This script updates the YaST files in the inst-sys
# with the files from GitHub.

require "fileutils"
require "find"
require "optparse"
require "pathname"
require "shellwords"
require "tmpdir"

# we need this gem for running the "rake install" command
NEEDED_GEM = "yast-rake".freeze
OVERLAY_PREFIX = "/var/lib/YaST2/overlayfs".freeze
YAST_OVERLAYS = [
  "/usr/lib/YaST2",
  "/usr/lib64/YaST2",
  "/usr/share/autoinstall",
  "/usr/share/applications/YaST2",
  # /usr/share/YaST2/ needs to be handled specially, it is writable
  # but contains symlinks to read-only subdirectories
  *Dir["/usr/share/YaST2/*"].each_with_object([]) do |f, arr|
    arr << f if File.directory?(f) && !File.writable?(f)
  end
]

# globs for ignored files
SKIP_FILES = [
  # skip documentation
  "/usr/share/doc/*",
  # skip manual pages
  "/usr/share/man/*",
  # skip sysconfig templates
  "/usr/share/fillup-templates/*"
].freeze

def msg(message)
  puts message
end

def details(message)
  # FIXME: only when verbose is set
  # puts message if ....
end

def check_env
  mounts = `mount`
  return if mounts =~ /^tmpfs on \/ type tmpfs/

  $stderr.puts "ERROR: This script can only work in the installation system (int-sys)!"
  exit 1
end

def gem_installed?(gem_name)
  gem(gem_name)
  true
rescue Gem::LoadError
  false
end

def install_gems(gem_names)
  system("gem install --no-document --no-format-exec #{gem_names.map(&:shellescape).join(" ")}")
end

def add_default_overlays
  YAST_OVERLAYS.each do |o|
    add_overlay(o)
  end
end

def add_overlay(dir)
  return if File.writable?(dir)
  msg("Adding overlay for #{dir}...")

  dir_name = dir.tr("/", "_")
  upperdir = File.join(OVERLAY_PREFIX, "upper", dir_name)
  workdir = File.join(OVERLAY_PREFIX, "workdir", dir_name)
  original_dir = File.join(OVERLAY_PREFIX, "original", dir_name)

  FileUtils.mkdir_p(upperdir)
  FileUtils.mkdir_p(workdir)
  FileUtils.mkdir_p(original_dir)

  # make the original content available in a separate directory
  system("mount --bind #{dir.shellescape} #{original_dir.shellescape}")
  # mark the mount as a private otherwise the overlay would propagate
  # through the bind mount and we would see the changed content here
  system("mount --make-private #{original_dir.shellescape} ")

  system("mount -t overlay overlay -o lowerdir=#{dir.shellescape}," \
    "upperdir=#{upperdir.shellescape},workdir=#{workdir.shellescape} #{dir.shellescape}")
end

def download_tar_archive(url, dir)
  msg("Downloading #{url}...")
  Dir.chdir(dir) do
    system("curl -L -s #{url.shellescape} | tar -xz")
  end
end

def download_gh_archive(repo, branch, dir)
  url = "https://github.com/#{repo}/archive/#{branch}.tar.gz"
  download_tar_archive(url, dir)
end

def install_sources(src, target)
  msg("Preparing files...")
  rakefile = Dir["#{src}/**/Rakefile"].first

  if rakefile
    src = File.dirname(rakefile)
    Dir.chdir(src) do
      `rake install DESTDIR=#{target.shellescape} 2> /dev/null`
    end
  else
    $stderr.puts "ERROR: Rakefile not found"
  end
end

def skip_file?(file)
  SKIP_FILES.any? { |glob| File.fnmatch?(glob, file) }
end

def copy_to_system(src)
  msg("Copying to system...")
  src_path = Pathname.new(src)
  cnt = 0
  Find.find(src) do |path|
    # TODO: what about symlinks or empty directories?
    next unless File.file?(path)

    relative_path = Pathname.new(path).relative_path_from(src_path).to_s
    system_file = File.absolute_path(relative_path, "/")
    system_dir = File.dirname(system_file)

    if skip_file?(system_file)
      details("Skipping: #{system_file}")
      next
    end

    if File.exist?(system_file)
      if FileUtils.identical?(system_file, path)
        details("Not modified: #{system_file}")
        next
      else
        add_overlay(system_dir)
        FileUtils.cp(path, system_file)
        msg("Updated: #{system_file}")
        cnt += 1
      end
    else
      # ensure the directory is writable
      if File.exist?(system_dir)
        add_overlay(system_dir)
      else
        # FIXME: maybe an overlay is needed for the upper directory...
        FileUtils.mkdir_p(system_dir)
      end

      FileUtils.cp(path, system_file)
      puts "Added: #{system_file}"
      cnt += 1
    end
  end

  msg("Number of modified files: #{cnt}")
end

def list_overlays
  mounts = `mount`

  mounts.lines.each_with_object([]) do |line, arr|
    arr << Regexp.last_match[1] if line =~ /^overlay on (.*) type overlay /
  end
end

def reset_all
  overlays = list_overlays
  return if overlays.empty?

  msg("Resetting all changes...")
  overlays.each do |o|
    puts "umount #{o}"
    `umount #{o.shellescape}`
  end

  Dir["#{File.join(OVERLAY_PREFIX, "original")}/*"].each do |o|
    message("umount #{o}")
    `umount #{o.shellescape}`
  end

  FileUtils.rm_rf(
    [
      File.join(OVERLAY_PREFIX, "upper"),
      File.join(OVERLAY_PREFIX, "workdir"),
      File.join(OVERLAY_PREFIX, "original")
    ]
  )
end

def modified_files(&block)
  return unless block_given?

  upper = Pathname.new(File.join(OVERLAY_PREFIX, "upper"))
  orig = Pathname.new(File.join(OVERLAY_PREFIX, "original"))
  Find.find(upper) do |f|
    next unless File.file?(f)
    relative_path = Pathname.new(f).relative_path_from(upper)
    original_path = File.join(orig, relative_path)
    parts = relative_path.split
    parts[0] = parts.first.to_s.tr("_", "/").gsub("//", "/")
    block.call(File.join(*parts), f, original_path)
  end
end


VERSION = "0.0.1"
DEFAULT_PORT = 8000
RAKE_ARCHIVE = "archive/current.tar.gz"

def version_sha
  require "digest/sha1"
  Digest::SHA1.hexdigest(File.read($PROGRAM_NAME))[0..7]
end

def version_string
  "#{VERSION} (#{version_sha})"
end

repo = ""
branch = "master"
overlay = ""
list = false
file_list = false
reset = false
diff = false
create_overlays = false
sync = nil

OptionParser.new do |parser|
  parser.on("-c", "--create-overlays",
    "Create the default YaST overlays") do |c|
    create_overlays = c
  end

  parser.on("-g", "--ghrepo GITHUB_REPO", "GitHub repository name") do |r|
    repo = r

    # add the default "yast" GitHub organization if missing
    repo = "yast/#{repo}" unless repo.include?("/")
  end

  parser.on("-b", "--branch BRANCH_OR_TAG",
    "Use the specified branch or tag (default: master)") do |b|
    branch = b
  end

  parser.on("-d", "--diff",
    "Display diff of the modified files") do |d|
    diff = d
  end

  parser.on("-o", "--overlay DIR",
    "Create overlayfs mount for the specified directory") do |o|

    if File.directory?(o)
      overlay = o
    else
      puts "ERROR: Directory #{o} not found"
      exit 1
    end
  end

  parser.on("-l", "--list-overlays", "List overlay mounts") do |_l|
    list = true
  end

  parser.on("-f", "--list-files", "List overlay files") do |_l|
    file_list = true
  end

  parser.on("-r", "--reset", "Remove all overlays, reset the system to the original state") do |_l|
    reset = true
  end

  parser.on("-s", "--sync URL", "Sync from server") do |s|
    sync = s
    sync = "http://#{sync}:#{DEFAULT_PORT}/#{RAKE_ARCHIVE}" if !sync.start_with?("http")
  end

  parser.on("-v", "--verbose", "Verbose output") do |v|
  end

  parser.on("", "--version", "Print the script version") do |vers|
    if vers
      puts "Version: #{version_string}"
      exit 0
    end
  end
end.parse!

check_env

add_overlay(overlay) if !overlay.empty?

if list
  puts list_overlays
end

if file_list
  modified_files { |f, _modif, _orig| puts f}
end

if diff
  modified_files do |f, _modif, orig|
    next unless File.exist?(f) && File.exist?(orig)
    system("diff -u #{orig.shellescape} #{f.shellescape}")
  end
end

add_default_overlays if create_overlays

# validation
if !repo.empty? || sync
  if !gem_installed?(NEEDED_GEM)
    msg("Installing missing Ruby gems...")
    add_overlay(Gem.dir)

    gems = [NEEDED_GEM]
    # handle the rake gem specifically, it is present in the system, but
    # the /usr/bin/rake file is missing
    gems << "rake" if !File.exist?("/usr/bin/rake")

    install_gems(gems)
  end

  Dir.mktmpdir do |download_dir|
    if !repo.empty?
      download_gh_archive(repo, branch, download_dir)
    else
      download_tar_archive(sync, download_dir)
    end

    Dir.mktmpdir do |target_dir|
      add_default_overlays
      install_sources(download_dir, target_dir)
      copy_to_system(target_dir)
    end
  end
end

reset_all if reset

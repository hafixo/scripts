#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(__dir__, "lib"))

require "erb"

require "y2status"

def render_erb(template, bind)
  include ERB::Util
  include Y2status::Helpers

  file = File.join(__dir__, "views", template)
  renderer = ERB.new(File.read(file))
  renderer.filename = file
  renderer.result(bind)
end

###################################################################################################

jenkins_servers = [
  Y2status::JenkinsServer.new("External Jenkins", "https://ci.opensuse.org/view/Yast")
]

if !Y2status::Options.instance.public_only
  # internal Jenkins status
  jenkins_servers << Y2status::JenkinsServer.new("Internal Jenkins", "https://ci.suse.de/view/YaST")
end

# OBS
obs_projects = ["YaST:Head", "YaST:SLE-15:GA", "YaST:SLE-12:SP4", "YaST:SLE-12:SP3" ].map do |p|
  Y2status::ObsProject.new(p)
end

obs_partial = render_erb("_obs.html.erb", binding)

# IBS
if !Y2status::Options.instance.public_only
  obs_projects = ["Devel:YaST:CASP:4.0", "Devel:YaST:SLE-12-SP3", "Devel:YaST:SLE-12-SP4",
    "Devel:YaST:SLE-15", "Devel:YaST:Head"].map do |p|
      Y2status::ObsProject.new(p, "https://api.suse.de")
  end

  obs_partial += render_erb("_obs.html.erb", binding)
end


docker_images = ["yastdevel/ruby", "yastdevel/cpp", "yastdevel/libstorage-ng", "libyui/devel"].map do |i|
  Y2status::DockerImage.new(i)
end

jenkins_partial = render_erb("_jenkins.html.erb", binding)
docker_partial = render_erb("_docker.html.erb", binding)

body = render_erb("index.html.erb", binding)
puts render_erb("layout.html.erb", binding)

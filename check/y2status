#!/usr/bin/env ruby

# install missing gems
if !File.exist?(".vendor")
  puts "Installing the needed Rubygems to .vendor/bundle ..."
  system "bundle install --path .vendor/bundle"
end

require "rubygems"
require "bundler/setup"

require "csv"
require "json"
require "optparse"
require "rainbow"
require "shellwords"
require "singleton"

# parse and store the command line options
class Options
  include Singleton

  attr_reader :verbose, :show_success, :color, :urls, :public_only

  def initialize
    @only_errors = true

    OptionParser.new do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

      opts.on("-c", "--[no-]color", "Colorize the output (default: auto, enabled on TTY)") do |c|
        Rainbow.enabled = c
      end

      opts.on("-p", "--public", "Query only the public services (default: false)") do |p|
        @public_only = p
      end

      opts.on("-s", "--success", "Show also the successful results (default: false)") do |s|
        @show_success = s
      end

      opts.on("-u", "--[no-]urls", "Display URL links with details (default: false)") do |u|
        @urls = u
      end

      opts.on("-v", "--[no-]verbose", "Run verbosely (default: false)") do |v|
        @verbose = v
      end

    end.parse!
  end
end

def print_verbose(msg)
  puts Rainbow(msg).magenta if Options.instance.verbose
end

def print_error(msg)
  puts Rainbow(msg).red
end

def download(url)
  print_verbose("Downloading #{url}...")
  # -s silent, -L follow redirects
  `curl -sL #{Shellwords.escape(url)}`
end

def jenkins_status(title, base_url)
  print_header(title, base_url)

  url = base_url + "/api/json?pretty=true"
  body = download(url)

  if body.empty?
    print_error("ERROR: Cannot download #{url}")
    return false
  end

  success = true
  status = JSON.parse(body)

  status["jobs"].each do |s|
    next unless s["color"] == "red" || Options.instance.show_success
    printf("    %-50s  ", s["name"])

    puts case s["color"]
    when "red"
      success = false
      link = if Options.instance.urls
        Rainbow(" (#{base_url}/job/#{s["name"]}/lastBuild/console)").cyan
      else
        ""
      end
      Rainbow("failed").red + link
    when "blue"
      Rainbow("success").green
    when "disabled"
      Rainbow("disabled").cyan
    else
      Rainbow(s["color"]).magenta
    end
  end

  success
end

#
# Get the OBS project build state
#
# @param [String] project the project name
# @param [String,nil] api the API URL
#
# @return [CSV::Table] the parsed table
#
def get_obs_status(project, api = nil)
  print_verbose("Running osc prjresults #{project}...")

  opt = api ? "-A #{Shellwords.escape(api)}" : ""
  str = `osc #{opt} prjresults --csv #{Shellwords.escape(project)}`

  CSV.parse(str, col_sep: ";", headers: true)
end

def obs_api_to_web(api)
  if api.nil?
    "https://build.opensuse.org"
  elsif api == "https://api.suse.de"
    "https://build.suse.de"
  else
    api
  end
end

def print_obs_header(project, api)
  type = (api == "https://api.suse.de") ? "IBS" : "OBS"
  print_header("#{type} #{project}", "#{obs_api_to_web(api)}/project/monitor/#{project}")
end

def print_obs_status(project, api = nil)
  print_obs_header(project, api)

  table = get_obs_status(project, api)

  success = true
  table.each do |row|
    row.each do |name, value|
      # skip the name pair
      next if name == "_"

      # never show disabled or excluded builds
      next if ["disabled", "excluded"].include?(value)

      # display only important values or all if requested
      next unless ["failed", "broken", "unresolvable"].include?(value) ||
          Options.instance.show_success

      package = row["_"]
      target = name.sub(/\/[^\/]*$/, "")
      printf("    %-35s  %-30s  ", package, target)

      if value == "succeeded"
        puts Rainbow(value).green
      elsif ["failed", "broken", "unresolvable"].include?(value)
        print Rainbow(value).red

        path = (value == "failed") ? "package/live_build_log" : "package/show"
        target = "" if value != "failed"

        link = if Options.instance.urls
          Rainbow(" (#{obs_api_to_web(api)}/#{path}/#{project}/#{package}/#{target})").cyan
        else
          ""
        end

        puts link
        success = false
      else
        puts Rainbow(value).yellow
      end
    end
  end

  success
end

def docker_status_url(img)
  "https://hub.docker.com/v2/repositories/#{img}/buildhistory/?page_size=250"
end

def print_docker_image_status(img, result)
  success = true
  printf("    %-50s  ", r["dockertag_name"])

  # "status" values:
  #     -1 = failed
  #   0..9 = building
  #     10 = success

  puts case result["status"]
  when -1
    success = false
    link = if Options.instance.urls
      Rainbow(" (https://hub.docker.com/r/#{img}/builds/#{result["build_code"]}/)").cyan
    else
      ""
    end
    Rainbow("failed").red + link
  when 10
    Rainbow("success").green
  when 0..9
    Rainbow("building").cyan
  else
    Rainbow("unknown").magenta
  end

  success
end

def print_dockerhub_status(img)
  print_header("Docker Hub #{img}", "https://hub.docker.com/r/#{img}/")

  url = docker_status_url(img)
  body = download(url)

  if body.empty?
    print_error("ERROR: Cannot download #{url}")
    return false
  end

  success = true
  status = JSON.parse(body)

  # remove the duplicates, we need just the latest result for each tag
  results = status["results"]
  results.uniq! { |r| r["dockertag_name"] }

  results.each do |r|
    next unless r["status"] < 0 || Options.instance.show_success

    success = print_docker_image_status(img, result) && success
  end

  success
end

def print_result(res)
  if res
    puts Rainbow("✔ OK").green
  else
    puts Rainbow("✘ Failed").red
  end
end

def print_header(title, url = nil)
  puts
  print title
  print Rainbow(" (#{url})").cyan if url && Options.instance.urls
  puts
end

###################################################################################################

# OBS
obs = ["YaST:SLE-12:SP3", "YaST:SLE-12:SP4", "YaST:SLE-15:GA", "YaST:Head"]
success = obs.map { |r| print_obs_status(r) }.all?

# IBS
if !Options.instance.public_only
  api = "https://api.suse.de"
  ibs = ["Devel:YaST:CASP:4.0", "Devel:YaST:SLE-12-SP3", "Devel:YaST:SLE-12-SP4",
         "Devel:YaST:SLE-15", "Devel:YaST:Head"]
  success = ibs.map { |r| print_obs_status(r, api) }.all? && success
end

# TODO: declined SR, e.g.: `osc request list -s declined YaST:Head`

# Docker Hub status
imgs = ["yastdevel/ruby", "yastdevel/cpp", "yastdevel/libstorage-ng", "libyui/devel"]
success = imgs.map { |i| print_dockerhub_status(i) }.all? && success

if !Options.instance.public_only
  # internal Jenkins status
  success = jenkins_status("Internal Jenkins", "https://ci.suse.de/view/YaST") && success
end

# external Jenkins status
success = jenkins_status("External Jenkins", "https://ci.opensuse.org/view/Yast") && success

puts
print Rainbow("Overall status: ").bright.yellow
puts print_result(success)

exit success
